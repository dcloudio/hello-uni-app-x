








































































































    export default {
        data() {
            return {
                title: 'input',
                focus: false,
                inputValue: '',
                showClearIcon: false,
                inputClearValue: '',
                changeValue: '',
                showPassword: true
            }
        },
        methods: {
            onKeyInput: function (event : InputEvent) {
                this.inputValue = event.detail.value
            },
            replaceInput: function (event : InputEvent) {
                var value = event.detail.value;
                if (value == '11') {
                    this.changeValue = '2';
                }
            },
            clearInput: function(event: InputEvent) {
                this.inputClearValue = event.detail.value;
                if (event.detail.value.length > 0) {
                    this.showClearIcon = true;
                } else {
                    this.showClearIcon = false;
                }
            },
            clearIcon: function() {
                this.inputClearValue = '';
                this.showClearIcon = false;
            },
            changePassword: function() {
                this.showPassword = !this.showPassword;
            },
            // hideKeyboard: function(event: InputEvent) {
            //     if (event.detail.value === '123') {
            //         uni.hideKeyboard();
            //     }
            // },
            // onFocus() {
            //     this.$mp.page.$getAppWebview().setStyle({
            //         softinputNavBar: 'none'
            //     })
            // },
            // onBlur() {
            //     this.$mp.page.$getAppWebview().setStyle({
            //         softinputNavBar: 'auto'
            //     })
            // }
        }
    }


const GenPagesComponentInputInputStyles = [new Map<string, Map<string, Map<string, any>>>([["common-page-head", new Map<string, any>([["", new Map<string, any>([["paddingTop", "35rpx"], ["paddingRight", "35rpx"], ["paddingBottom", "35rpx"], ["paddingLeft", "35rpx"], ["flexDirection", "row"], ["justifyContent", "center"]])]])], ["common-page-head-title-box", new Map<string, any>([["", new Map<string, any>([["paddingTop", 0], ["paddingRight", "40rpx"], ["paddingBottom", 0], ["paddingLeft", "40rpx"], ["height", "88rpx"], ["borderBottomWidth", "2rpx"], ["borderBottomStyle", "solid"], ["borderBottomColor", "#D8D8D8"]])]])], ["common-page-head-title", new Map<string, any>([["", new Map<string, any>([["lineHeight", "88rpx"], ["fontSize", "30rpx"], ["color", "#BEBEBE"]])]])], ["nvue-page-root", new Map<string, any>([["", new Map<string, any>([["backgroundColor", "#F8F8F8"], ["paddingBottom", 20]])]])], ["title", new Map<string, any>([["", new Map<string, any>([["paddingTop", 5], ["paddingRight", 13], ["paddingBottom", 5], ["paddingLeft", 13]])]])], ["uni-form-item__title", new Map<string, any>([["", new Map<string, any>([["fontSize", 16], ["lineHeight", 24]])]])], ["uni-input-wrapper", new Map<string, any>([["", new Map<string, any>([["display", "flex"], ["paddingTop", 8], ["paddingRight", 13], ["paddingBottom", 8], ["paddingLeft", 13], ["flexDirection", "row"], ["flexWrap", "nowrap"], ["backgroundColor", "#FFFFFF"]])]])], ["uni-input", new Map<string, any>([["", new Map<string, any>([["height", 28], ["lineHeight", 28], ["fontSize", 15], ["paddingTop", 0], ["paddingRight", 0], ["paddingBottom", 0], ["paddingLeft", 0], ["flex", "1"], ["backgroundColor", "#FFFFFF"]])]])], ["uni-icon", new Map<string, any>([["", new Map<string, any>([["width", 24], ["height", 24]])]])]])]
@Suppress("UNUSED_PARAMETER") function GenPagesComponentInputInputRender(_ctx: GenPagesComponentInputInput): VNode | null {
const _component_page_head = resolveComponent("page-head")

  return createElementVNode("view", new Map<string, any | null>([["class", "nvue-page-root"]]), [
    createVNode(_component_page_head, new Map<string, any | null>([["title", _ctx.title]]), null, 8 /* PROPS */, ["title"]),
    createElementVNode("view", new Map<string, any | null>([["class", "uni-common-mt"]]), [
      createCommentVNode(" <view class=\"uni-form-item uni-column\">\n                <view class=\"title\"><text class=\"uni-form-item__title\">可自动聚焦的 input</text></view>\n                <view class=\"uni-input-wrapper\">\n                    <input class=\"uni-input\" :focus=\"true\" placeholder=\"自动获得焦点\" ref=\"input\"/>\n                </view>\n            </view> "),
      createCommentVNode(" <view v-if=\"platform==='ios'&&!isNvue\" class=\"uni-form-item uni-column\">\n                <view class=\"title\"><text class=\"uni-form-item__title\">隐藏 iOS 软键盘上的导航条</text></view>\n                <view class=\"uni-input-wrapper\">\n                    <input class=\"uni-input\" placeholder=\"触摸其他地方收起键盘\" @focus=\"onFocus\" @blur=\"onBlur\" />\n                </view>\n            </view> "),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "键盘右下角按钮显示为搜索")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["confirmType", "search"],
            ["placeholder", "键盘右下角按钮显示为搜索"]
          ]))
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "键盘右下角按钮显示为发送")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["confirmType", "send"],
            ["placeholder", "键盘右下角按钮显示为发送"]
          ]))
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "控制最大输入长度的 input")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["maxlength", 10],
            ["placeholder", "最大输入长度为10"]
          ]))
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "实时获取输入值：" + toDisplayString(_ctx.inputValue), 1 /* TEXT */)
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["onInput", _ctx.onKeyInput],
            ["placeholder", "输入同步到view中"]
          ]), null, 40 /* PROPS, HYDRATE_EVENTS */, ["onInput"])
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "控制输入的 input")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["onInput", _ctx.replaceInput],
            ["value", _ctx.changeValue],
            ["placeholder", "连续的两个1会变成2"]
          ]), null, 40 /* PROPS, HYDRATE_EVENTS */, ["onInput", "value"])
        ])
      ]),
      createCommentVNode(" <view class=\"uni-form-item uni-column\">\n                <view class=\"title\"><text class=\"uni-form-item__title\">控制键盘的 input</text></view>\n                <view class=\"uni-input-wrapper\">\n                    <input class=\"uni-input\" ref=\"input1\" @input=\"hideKeyboard\" placeholder=\"输入123自动收起键盘\" />\n                </view>\n            </view> "),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "数字输入的 input")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["type", "number"],
            ["placeholder", "这是一个数字输入框"]
          ]))
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "密码输入的 input")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["password", true],
            ["type", "text"],
            ["placeholder", "这是一个密码输入框"]
          ]))
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "带小数点的 input")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["type", "digit"],
            ["placeholder", "带小数点的数字键盘"]
          ]))
        ])
      ]),
      createCommentVNode(" <view class=\"uni-form-item uni-column\">\n                <view class=\"title\"><text class=\"uni-form-item__title\">身份证输入的 input</text></view>\n                <view class=\"uni-input-wrapper\">\n                    <input class=\"uni-input\" type=\"idcard\" placeholder=\"身份证输入键盘\" /> </view>\n            </view> "),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "控制占位符颜色的 input")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["placeholder-style", "color:#F76260"],
            ["placeholder", "占位符字体是红色的"]
          ]))
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "带清除按钮的输入框")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["placeholder", "带清除按钮的输入框"],
            ["value", _ctx.inputClearValue],
            ["onInput", _ctx.clearInput]
          ]), null, 40 /* PROPS, HYDRATE_EVENTS */, ["value", "onInput"]),
          isTrue(_ctx.showClearIcon)
            ? createElementVNode("image", new Map<string, any | null>([
                ["key", 0],
                ["class", "uni-icon"],
                ["src", "/static/icons/clear.png"],
                ["onClick", _ctx.clearIcon]
              ]), null, 8 /* PROPS */, ["onClick"])
            : createCommentVNode("v-if", true)
        ])
      ]),
      createElementVNode("view", new Map<string, any | null>([["class", "uni-form-item uni-column"]]), [
        createElementVNode("view", new Map<string, any | null>([["class", "title"]]), [
          createElementVNode("text", new Map<string, any | null>([["class", "uni-form-item__title"]]), "可查看密码的输入框")
        ]),
        createElementVNode("view", new Map<string, any | null>([["class", "uni-input-wrapper"]]), [
          createElementVNode("input", new Map<string, any | null>([
            ["class", "uni-input"],
            ["placeholder", "请输入密码"],
            ["password", _ctx.showPassword]
          ]), null, 8 /* PROPS */, ["password"]),
          createElementVNode("image", new Map<string, any | null>([
            ["class", "uni-icon"],
            ["src", !_ctx.showPassword ? '/static/icons/eye-active.png': '/static/icons/eye.png'],
            ["onClick", _ctx.changePassword]
          ]), null, 8 /* PROPS */, ["src", "onClick"])
        ])
      ])
    ])
  ])
}