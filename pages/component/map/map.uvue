<template>
  <view class="content">
    <map class="map" id="map1" ref="map1" :controls="controls" :scale="scale" min-scale="3" max-scale="20" :longitude="location.longitude"
      :latitude="location.latitude" :show-location="showLocation" :enable-3D="enable3D" :rotate="rotate" :skew="skew"
      :show-compass="showCompass" :enable-overlooking="enableOverlooking" :enable-zoom="enableZoom"
      :enable-scroll="enableScroll" :enable-rotate="enableRotate" :enable-satellite="enableSatellite"
      :enable-traffic="enableTraffic" :markers="markers" :polyline="polyline" :circles="circles" :polygons="polygons"
      :include-points="includePoints" @tap="maptap" @controltap="oncontroltap" @markertap="onmarkertap"
      @callouttap="oncallouttap" @poitap="onpoitap" @updated="onupdated" @regionchange="onregionchange"></map>
    <scroll-view class="scrollview" scroll-y="true">
      <view class="uni-title">
        <text class="uni-title-text">属性示例</text>
      </View>
      <input-data defaultValue="13" title="scale: 缩放级别，取值范围为3-20" type="number" @confirm="confirm_scale_input"></input-data>
      <boolean-data :defaultValue="showLocation" title="开启显示带有方向的当前定位点" @change="change_show_location"></boolean-data>

      <button class="button" @click="addControls">控件</button>
      <button class="button" @click="addMarkers">标记点</button>
      <button class="button" @click="addPolyline">路线</button>
      <button class="button" @click="addPolygons">多边形</button>
      <button class="button" @click="addCircles">圆</button>
      <button class="button" @click="includePoint">缩放视野以包含所有给定的坐标点</button>
      <view class="uni-title">
        <text class="uni-title-text">方法示例</text>
      </View>
      <button class="button" @click="handleGetCenterLocation">获取当前地图中心的经纬度</button>
      <button class="button" @click="handleGetRegion">获取当前地图的视野范围</button>
      <button class="button" @click="handleTranslateMarker">平移marker，带动画</button>
    </scroll-view>
  </view>
</template>

<script setup lang="uts">
  type Anchor = {
    x : number,
    y : number
  }

  type Callout = {
    content : string,
    color : string,
    fontSize : number,
    borderRadius : number,
    borderWidth : number,
    borderColor : string,
    bgColor : string,
    padding : string,
    display : string
  }

  type Markers = {
    id : number,
    latitude : number,
    longitude : number,
    title ?: string
    zIndex ?: string,
    iconPath : string,
    rotate ?: number,
    width ?: number,
    height ?: number,
    anchor ?: Anchor,
    callout ?: Callout
  }

  type Points = {
    latitude : number,
    longitude : number
  }

  type Polyline = {
    points : Points[],
    color : string,
    width : number,
    dottedLine : boolean,
    arrowLine : boolean,
    borderColor : string,
    borderWidth : number
  }

  type Polygons = {
    points : Points[];
    fillColor : string;
    strokeWidth : number;
    strokeColor : string;
    zIndex : number;
  }

  type Circles = {
    latitude : number;
    longitude : number;
    radius : number;
    strokeWidth : number;
    color : string;
    fillColor : string;
  }

  const testMarkers = [{
    id: 0,
    latitude: 39.989631,
    longitude: 116.481018,
    title: '方恒国际 阜通东大街6号',
    zIndex: '1',
    iconPath: '../../../static/location.png',
    rotate: 0,
    width: 20,
    height: 20,
    anchor: {
      x: 0.5,
      y: 1
    },
    callout: {
      content: '方恒国际 阜通东大街6号',
      color: '#00BFFF',
      fontSize: 10,
      borderRadius: 4,
      borderWidth: 1,
      borderColor: '#333300',
      bgColor: '#CCFF99',
      padding: '5',
      display: 'ALWAYS'
    }
  },
  {
    id: 1,
    latitude: 39.9086920000,
    longitude: 116.3974770000,
    title: '天安门',
    zIndex: '1',
    iconPath: '../../../static/location.png',
    width: 40,
    height: 40,
    anchor: {
      x: 0.5,
      y: 1
    },
    callout: {
      content: '首都北京\n天安门',
      color: '#00BFFF',
      fontSize: 12,
      borderRadius: 2,
      borderWidth: 0,
      borderColor: '#333300',
      bgColor: '#CCFF11',
      padding: '1',
      display: 'ALWAYS'
    }
  }
  ];

  const testPolyline = [{
    points: [{
      latitude: 39.925539,
      longitude: 116.279037
    },
    {
      latitude: 39.925539,
      longitude: 116.520285
    }],
    color: '#FFCCFF',
    width: 7,
    dottedLine: true,
    arrowLine: true,
    borderColor: '#000000',
    borderWidth: 2
  },
  {
    points: [{
      latitude: 39.938698,
      longitude: 116.275177
    },
    {
      latitude: 39.966069,
      longitude: 116.289253
    },
    {
      latitude: 39.944226,
      longitude: 116.306076
    },
    {
      latitude: 39.966069,
      longitude: 116.322899
    },
    {
      latitude: 39.938698,
      longitude: 116.336975
    }],
    color: '#CCFFFF',
    width: 5,
    dottedLine: true,
    arrowLine: true,
    borderColor: '#CC0000',
    borderWidth: 3
  }
  ];

  const testPolygons = [{
    points: [{
      latitude: 39.781892,
      longitude: 116.293413
    },
    {
      latitude: 39.787600,
      longitude: 116.391842
    },
    {
      latitude: 39.733187,
      longitude: 116.417932
    },
    {
      latitude: 39.704653,
      longitude: 116.338255
    }],
    fillColor: '#FFCCFF',
    strokeWidth: 3,
    strokeColor: '#CC99CC',
    zIndex: 11
  },
  {
    points: [{
      latitude: 39.887600,
      longitude: 116.518932
    },
    {
      latitude: 39.781892,
      longitude: 116.518932
    },
    {
      latitude: 39.781892,
      longitude: 116.428932
    },
    {
      latitude: 39.887600,
      longitude: 116.428932
    }
    ],
    fillColor: '#CCFFFF',
    strokeWidth: 5,
    strokeColor: '#CC0000',
    zIndex: 3
  }
  ];

  const testCircles = [{
    latitude: 39.996441,
    longitude: 116.411146,
    radius: 15000,
    strokeWidth: 5,
    color: '#CCFFFF',
    fillColor: '#CC0000'
  },
  {
    latitude: 40.096441,
    longitude: 116.511146,
    radius: 12000,
    strokeWidth: 3,
    color: '#CCFFFF',
    fillColor: '#FFCCFF'
  },
  {
    latitude: 39.896441,
    longitude: 116.311146,
    radius: 9000,
    strokeWidth: 1,
    color: '#CCFFFF',
    fillColor: '#CC0000'
  }
  ];

  const testIncludePoints = [{
    latitude: 39.989631,
    longitude: 116.481018,
  },
  {
    latitude: 39.9086920000,
    longitude: 116.3974770000,
  }
  ];

  type ControlsType = {
  	id?: number;
  	position: PositionType;
    iconPath:string;
  	clickable?: boolean;
  }

  type PositionType = {
  	left: number,
  	top: number,
  	width: number,
  	height: number
  }

  const location = ref({ longitude: 116.39742, latitude: 39.909 });
  const controls = ref( []as ControlsType[]);
  const showLocation = ref(false);
  const scale = ref(13);
  const showCompass = ref(true);
  const enable3D = ref(true);
  const enableOverlooking = ref(true);
  const enableZoom = ref(true);
  const enableScroll = ref(true);
  const enableRotate = ref(true);
  const enableSatellite = ref(false);
  const enableTraffic = ref(false);
  const polyline = ref([] as Polyline[]);
  const markers = ref([] as Markers[]);
  const polygons = ref([] as Polygons[]);
  const circles = ref([] as Circles[]);
  const includePoints = ref([] as Points[]);
  const rotate = ref(0);
  const skew = ref(0);
  const map = ref(null as MapContext | null);
  const autoTest = ref(false);
  const getCenterLocationTest = ref({});
  const getRegionTest = ref({});

  onReady(() => {
    map.value = uni.createMapContext("map1", getCurrentInstance()!.proxy!)
  });

  const addControls = () => {
    controls.value = [{
      id: 1,
      position: {
        left: 5,
        top: 180,
        width: 30,
        height: 30
      },
      iconPath: '../../../static/uni.png',
      clickable: true
    }]
  }
  const confirm_scale_input = (value: number) => {
    scale.value = value
  };

  const change_show_location = (checked : boolean)=>{
    showLocation.value = checked
  }

  const enableThreeD = (e)=>{
    enable3D.value = e.detail.value;
  }
  const changeShowCompass = (e)=>{
    showCompass.value = e.detail.value;
  }
  const changeEnableOverlooking = (e) => {
    enableOverlooking.value = e.detail.value;
  };

  const changeEnableZoom = (e) => {
    enableZoom.value = e.detail.value;
  };

  const changeEnableScroll = (e) => {
    enableScroll.value = e.detail.value;
  };

  const changeEnableRotate = (e) => {
    enableRotate.value = e.detail.value;
  };

  const changeEnableSatellite = (e) => {
    enableSatellite.value = e.detail.value;
  };

  const changeEnableTraffic = (e) => {
    enableTraffic.value = e.detail.value;
  };

  const addMarkers = () => {
    markers.value = testMarkers;
  };

  const addPolygons = () => {
    polygons.value = testPolygons;
  };

  const addPolyline = () => {
    polyline.value = testPolyline;
  };

  const addCircles = () => {
    circles.value = testCircles;
  };

  const includePoint = () => {
    includePoints.value = testIncludePoints;
  };

  const handleGetCenterLocation = () => {
    if (map.value) {
      map.value.getCenterLocation({
        success: ret => {
          console.log('getCenterLocation',ret);
          // console.log(JSON.stringify(ret));
          getCenterLocationTest.value = ret;
          uni.showModal({
            content: JSON.stringify(ret)
          });
        }
      });
    }
  };

  const handleGetRegion = () => {
    if (map.value) {
      map.value.getRegion({
        success: ret => {
          console.log(JSON.stringify(ret));
          getRegionTest.value = ret;
          uni.showModal({
            content: JSON.stringify(ret)
          });
        }
      });
    }
  };

  const handleTranslateMarker = () => {
    if (map.value) {
      map.value.translateMarker({
        markerId: 1,
        destination: {
          latitude: 39.989631,
          longitude: 116.481018
        },
        autoRotate:true,
        rotate:10,
        duration: 2000,
        animationEnd: () => {
          console.log('动画结束');
        },
        success: ret => {
          console.log('handleTranslateMarker',JSON.stringify(ret));
        },
        fail: ret => {
          console.log('handleTranslateMarker',JSON.stringify(ret));
        }
      });
    }
  };

  const maptap = (e) => {
    uni.showModal({
      content: JSON.stringify(e)
    });
  };

  const onmarkertap = (e:UniEvent) => {
    console.log('点击标记点时触发',e)
    uni.showModal({
      content: JSON.stringify(e)
    });
  };

  const oncontroltap = (e:UniEvent) => {
    console.log('点击控件时触发',e)
    uni.showModal({
      content: JSON.stringify(e)
    });
  };

  const oncallouttap = (e:UniEvent) => {
    console.log('点击标记点对应的气泡时触发',e)
    uni.showModal({
      content: JSON.stringify(e)
    });
  };

  const onupdated = (e:UniEvent) => {
    console.log('在地图渲染更新完成时触发',e)
  };

  const onregionchange = (e:UniEvent) => {
    console.log('视野发生变化时触发',e)
  };

  const onpoitap = (e) => {
    uni.showModal({
      content: JSON.stringify(e)
    });
  };

</script>

<style>
  .content {
    flex: 1;
  }

  .map {
    width: 100%;
    height: 300px;
    background-color: #f0f0f0;
  }

  .scrollview {
    flex: 1;
    padding: 10px;
  }

  .list-item {
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    padding: 5px 0px;
  }

  .list-text {
    flex: 1;
  }

  .button {
    margin-top: 5px;
    margin-bottom: 5px;
  }
</style>
