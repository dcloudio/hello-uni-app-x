<template>
  <scroll-view class="page" :scroll-top="pageScrollTop">
    <view class="search-bar" ref="header">
      <input placeholder="搜索..." />
    </view>
    <view class="swiper-list">
      <scroll-view class="swiper-tabs" :scroll-left="tabsScrollLeft" :scroll-x="true" :show-scrollbar="false">
        <view>
          <view class="flex-row">
            <text class="swiper-tabs-item" :class="swiperIndex==index ? 'swiper-tabs-item-active' : ''"
              v-for="(item, index) in swiperList" ref="swipertab" :key="index" @click="onTabClick(index)">
              {{item.name}}
            </text>
          </view>
          <view class="swiper-tabs-indicator">
            <view class="swiper-tabs-underline"
              :style="{left: swiperIndicatorLineLeft + 'px', width: swiperIndicatorLineWidth + 'px'}"></view>
          </view>
        </view>
      </scroll-view>
      <swiper class="swiper-view" ref="swiper" :current="swiperIndex" @transition="onSwiperTransition"
        @animationfinish="onSwiperAnimationfinish">
        <swiper-item class="swiper-item" v-for="(item, index) in swiperList" :key="index">
          <long-page ref="longPage" :type="item.type" :preload="item.preload"></long-page>
        </swiper-item>
      </swiper>
    </view>
  </scroll-view>
</template>

<script>
  import longPage from './long-list-page.uvue';

  type SwiperTabsItem = {
    left : number,
    width : number
  }

  type SwiperViewItem = {
    type : string,
    name : string,
    preload : Boolean,
  }

  export default {
    components: {
      longPage
    },
    data() {
      return {
        pageScrollTop: 0,
        swiperList: [
          {
            type: 'UpdatedDate',
            name: '最新上架',
            preload: true
          } as SwiperViewItem,
          {
            type: 'FreeHot',
            name: '免费热榜'
          } as SwiperViewItem,
          {
            type: 'PaymentHot',
            name: '付费热榜'
          } as SwiperViewItem,
          {
            type: 'HotList',
            name: '热门总榜'
          } as SwiperViewItem
        ] as SwiperViewItem[],
        swiperIndex: -1,
        tabsScrollLeft: 0,
        swiperIndicatorLineLeft: 0,
        swiperIndicatorLineWidth: 0,
        $headerHeight: 0,
        $animationFinishIndex: 0,
        $swiperWidth: 0,
        $swiperTabsRect: [] as SwiperTabsItem[]
      }
    },
    onReady() {
      this.$headerHeight = (this.$refs["header"] as INode).offsetHeight
      this.$swiperWidth = (this.$refs["swiper"] as INode).offsetWidth
      this.queryTabItemsSize()
      this.setSwiperIndex(0, true)
    },
    methods: {
      onTabClick(index : number) {
        this.setSwiperIndex(index, false)
      },
      onSwiperTransition(e : SwiperTransitionEvent) {
        const offsetX = e.detail.dx
        // 兼容微信 skyline 和 webview
        const offsetIndex = Math.abs(offsetX.toInt()) == this.$swiperWidth ? 0 : offsetX / this.$swiperWidth
        const currentIndex = this.$animationFinishIndex + Math.abs(offsetIndex.toInt())

        let moveToIndex = offsetX > 0 ? currentIndex + 1 : currentIndex - 1
        if (moveToIndex < 0) { moveToIndex = 0 }
        if (moveToIndex > this.$swiperTabsRect.length - 1) { moveToIndex = this.$swiperTabsRect.length - 1 }

        const percentage = Math.abs(offsetX) / this.$swiperWidth
        const currentSize = this.$swiperTabsRect[currentIndex]
        const moveToSize = this.$swiperTabsRect[moveToIndex]
        const indicatorlineL = currentSize.left + (moveToSize.left - currentSize.left) * percentage
        const indicatorlineW = currentSize.width + (moveToSize.width - currentSize.width) * percentage

        this.updateTabIndicator(indicatorlineL, indicatorlineW)

        this.initSwiperItemPage(moveToIndex)
      },
      onSwiperAnimationfinish(e : SwiperAnimationFinishEvent) {
        this.setSwiperIndex(e.detail.current, true)
        this.$animationFinishIndex = e.detail.current
      },
      queryTabItemsSize() {
        this.$swiperTabsRect.length = 0
        const tabs = this.$refs["swipertab"] as INode[]
        tabs.forEach((node) => {
          this.$swiperTabsRect.push({
            left: node.offsetLeft,
            width: node.offsetWidth
          } as SwiperTabsItem)
        })
      },
      setSwiperIndex(index : Number, updateIndicator : Boolean) {
        if (this.swiperIndex === index) {
          return
        }
        this.swiperIndex = index

        this.initSwiperItemPage(index)

        if (updateIndicator) {
          this.updateTabIndicator(this.$swiperTabsRect[index].left, this.$swiperTabsRect[index].width)
        }
      },
      updateTabIndicator(left : Number, width : Number) {
        this.swiperIndicatorLineLeft = left
        this.swiperIndicatorLineWidth = width
        this.tabsScrollLeft = left + width / 2 - this.$swiperWidth / 2
      },
      initSwiperItemPage(index : Number) {
        if (!this.swiperList[index].preload) {
          this.swiperList[index].preload = true;
          (this.$refs["longPage"]! as ComponentPublicInstance[])[index].$callMethod('loadData')
        }
      }
    }
  }
</script>

<style>
  .flex-row {
    flex-direction: row;
  }

  .page {
    flex: 1;
  }

  .search-bar {
    padding: 10px;
  }

  .swiper-list {
    flex: 1;
    /* height: 100%; */
  }

  .swiper-tabs {
    background-color: #ffffff;
  }

  .swiper-tabs-item {
    color: #555;
    font-size: 16px;
    padding: 12px 25px;
  }

  .swiper-tabs-item-active {
    color: #007AFF;
  }

  .swiper-tabs-indicator {
    position: relative;
    height: 2px;
  }

  .swiper-tabs-underline {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 0;
    background-color: #007AFF;
  }

  .swiper-view {
    flex: 1;
  }

  .swiper-item {
    flex: 1;
  }
</style>