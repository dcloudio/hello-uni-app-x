<template>
	<!-- #ifdef APP -->
	<scroll-view style="flex:1">
	<!-- #endif -->
		<view id="main" style="width: 100px;height: 100px; background-color: brown; transform: scale(1);"></view>

		<button @click="startAnimate">开始动画</button>
		<button @click="pauseAnimate">暂停动画</button>
		<button @click="resumeAnimate">恢复动画</button>
		<button @click="cancelAnimate">取消动画</button>

		<image src="/static/uni.png" id="roll" style="width: 100px; height: 100px;margin: 10px;"></image>

		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改宽度</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="widthProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改高度</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="heightProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改margin</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="marginProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改padding</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="paddingProperty">
				<view style="width: 50px;height: 50px;background-color: black;"></view>
			</view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改背景色</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="backgroundProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改border颜色</text>
			<view style="width: 100px;height: 100px;background-color: brown;border-width: 10px;border-color: black;border-style: solid;" id="borderProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改transform</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="transformProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改position</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="positionProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改背景色和宽度</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="backgroundAndWidthProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改背景色和margin-left</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="backgroundAndMarginLeftProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">修改背景色和transform</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="backgroundAndTransformProperty"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">执行的动画只有一个关键帧1</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="oneProperty1"></view>
		</view>
		<view style="border-radius: 5px;margin: 4px;padding: 4px;border-style: solid;background-color: #eee;border-color: #eee;">
			<text style="margin-bottom: 4px;">执行的动画只有一个关键帧2</text>
			<view style="width: 100px;height: 100px;background-color: brown;" id="oneProperty2"></view>
		</view>
	<!-- #ifdef APP -->
	</scroll-view>
	<!-- #endif -->
</template>

<script>
	export default {
		data() {
			return {
				mainView: null as UniElement | null,
				animation: null as UniAnimation | null
			}
		},
		onReady() {
			this.mainView = uni.getElementById("main")
			var roll = uni.getElementById("roll")
			roll!.animate([
				{ transform: "translateX(0) rotate(0)" }, // keyframe
				{ transform: "translateX(200px) rotate(540deg)" }, // keyframe
			],
				{
					// keyframe options
					duration: 2000,
					direction: "alternate",
					easing: "ease-in-out",
					iterations: Infinity,
				},
			)

			uni.getElementById("widthProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					width: ["100px", "200px", "100px"]
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("heightProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					height: ["100px", "200px"]
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("marginProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					margin: ["8px", "16px", "32px"]
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("paddingProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					padding: ["0px", "16px", "32px", "0px"]
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("backgroundProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate([
					{
						offset: 0.3,
						backgroundColor: "yellow"
					},
					{
						offset: 0.6,
						backgroundColor: "red"
					},
					{
						backgroundColor: "blue"
					}
				], {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("borderProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate([
					{
						offset: 0.3,
						borderColor: "yellow"
					},
					{
						offset: 0.6,
						borderColor: "pink"
					},
					{
						borderColor: "blue"
					}
				], {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("transformProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate([
					{
						transform: "translateX(0px) scale(1) rotate(0deg)"
					},
					{
						transform: "translateX(100px)"
					},
					{
						transform: "scale(0.8) rotate(180deg)"
					}
				], {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("positionProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					left: ["0px", "16px", "32px", "0px"]
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("backgroundAndWidthProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					width: ["100px", "200px"],
					backgroundColor: ["red", "yellow", "blue"]
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("backgroundAndMarginLeftProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate([
					{
						offset: 0.2,
						backgroundColor: "red"
					}, {
						marginLeft: "10px"
					}, {
						marginLeft: "20px"
					}, {
						marginLeft: "30px",
						backgroundColor: "pink"
					}
				], {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("backgroundAndTransformProperty")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate([
					{
						offset: 0.2,
						backgroundColor: "red"
					}, {
						transform: "translate(30px,0px)"
					}, {
						transform: "translate(50px,0px)"
					}, {
						transform: "translate(100px,0px)",
						backgroundColor: "pink"
					}
				], {
					duration: 1000,
					easing:"",
					fill: "forwards"
				})
			})
			uni.getElementById("oneProperty1")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate({
					backgroundColor: "green"
				}, {
					duration: 1000,
					fill: "forwards"
				})
			})
			uni.getElementById("oneProperty2")?.addEventListener("click", (e : UniPointerEvent) => {
				e.currentTarget?.animate([{
					backgroundColor: "blue"
				}], {
					duration: 1000,
					fill: "forwards"
				})
			})
		},
		methods: {
			startAnimate() {
				this.animation = this.mainView!.animate([
					{
						transform: "scale(1)",
						transformOrigin: "0px 0px"
					},
					{
						transform: "scale(0)",
						transformOrigin: "50px 50px"
					},
					{
						transform: "scale(1)",
						transformOrigin: "100px 100px"
					}
				], {
					duration: 5000,

				})
				this.animation!.oncancel = (_ : UniAnimationPlaybackEvent) => {
					uni.showToast({
						title: "动画被取消了"
					})
				}
				this.animation!.onfinish = (_ : UniAnimationPlaybackEvent) => {
					uni.showToast({
						title: "动画播放完成"
					})
				}
			},
			pauseAnimate() {
				this.animation?.pause()
			},
			resumeAnimate() {
				this.animation?.play()
			},
			cancelAnimate() {
				this.animation?.cancel()
			}
		}
	}
</script>

<style>
	.view-margin {
		margin: 8px;
	}
</style>
