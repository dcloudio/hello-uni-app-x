<template>
    <view>
        <page-head :title="title"></page-head>
		<view class="uni-list">
		    <radio-group @change="radioChange">
		        <radio class="uni-list-cell uni-list-cell-pd" v-for="(item, index) in items" :key="item.value"
		            :class="index < items.length - 1 ? 'uni-list-cell-line': ''" :value="item.value"
		            :checked="index === current">
		            {{item.name}}
		        </radio>
		    </radio-group>
		</view>
		<view class="uni-list">
		  <view class="uni-list-cell uni-list-cell-pd">
		    <view class="uni-list-cell-db">自定义itemColor</view>
		    <switch :checked="itemColorCustom" />
		  </view>
		</view>
        <view class="uni-padding-wrap">
            <view class="uni-btn-v">
                <button class="target" type="default" @tap="actionSheetTap">弹出action sheet</button>
            </view>
        </view>
    </view>
</template>
<script lang="ts">
	type ItemType = {
	    value : string,
	    name : string,
	}
    export default {
        data() {
            return {
                title: 'action-sheet',
				itemColorCustom:false,
				items: [{
				    value: '标题',
				    name: '有标题'
				},
				{
				    value: '',
				    name: '无标题'
				},
				{
				    value: '超长标题测试内容，测试超过显示最大范围之后的样式-超长标题测试内容，测试超过显示最大范围之后的样式',
				    name: '超长标题'
				}
				] as ItemType[],
				current: 0,
                // #ifdef H5
                buttonRect: {},
                // #endif
            }
        },
        // #ifdef H5
        onReady() {
            this.getNodeInfo()
            window.addEventListener('resize', this.getNodeInfo)
        },
        beforeDestroy() {
            window.removeEventListener('resize', this.getNodeInfo)
        },
        // #endif
        methods: {
			radioChange(e : RadioGroupChangeEvent) {
			    for (let i = 0; i < this.items.length; i++) {
			        if (this.items[i].value === e.detail.value) {
			            this.current = i;
			            break;
			        }
			    }
			},
            actionSheetTap() {
				console.log("itemColorCustom  === " + this.itemColorCustom)
                const that = this
                uni.showActionSheet({
                    title: this.items[this.current].value,
                    itemList: ['item1', 'item2', 'item3', 'item4'],
                    // #ifdef H5
                    popover: {
                        // 104: navbar + topwindow 高度，暂时 fix createSelectorQuery 在 pc 上获取 top 不准确的 bug
                        top: that.buttonRect.top + 104 + that.buttonRect.height,
                        left: that.buttonRect.left + that.buttonRect.width / 2
                    },
                    // #endif
                    success: (e) => {
                        console.log(e.tapIndex);
                        uni.showToast({
                            title: "点击了第" + e.tapIndex + "个选项",
                            icon: "none"
                        })
                    }
                })
            },
			
            // #ifdef H5
            getNodeInfo() {
                uni.createSelectorQuery().select('.target').boundingClientRect().exec((ret) => {
                    const rect = ret[0]
                    if (rect) {
                        this.buttonRect = rect
                    }
                });
            }
            // #endif
        }
    }
</script>