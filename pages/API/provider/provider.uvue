<template>
	<!-- #ifdef APP -->
	<scroll-view class="page-scroll-view">
	<!-- #endif -->
		<view class="page">
			<page-head :title="title"></page-head>
			<view class="service-item" v-for="(item, index) in serviceList" :key="index">
				<text class="service-name">{{item.name}}:</text>
				<view class="provider-list">
					<!-- #ifdef APP-IOS -->
					<text class="provider-item" v-for="(item2, index2) in item.provider" :key="index2">
						{{item2}}
						{{item.providerObjMap.length > 0 ? ':' + JSON.stringify(item.providerObjMap[index2]) : '' }}
					</text>
					<!-- #endif -->
					<!-- #ifdef APP-ANDROID -->
					<text class="provider-item" v-for="(item2, index2) in item.provider" :key="index2">
						{{item2}}
						{{item.providerObj.length > 0 ? ':' + JSON.stringify(item.providerObj[index2]) : '' }}
					</text>
					<!-- #endif -->

				</view>
			</view>
			<button class="btn-get-provider" type="primary" @click="getProvider">getProvider</button>
		</view>
	<!-- #ifdef APP -->
	</scroll-view>
	<!-- #endif -->
</template>

<script>
	type ProviderItem = {
		service : string,
		name : string,
		provider : string[],
		providerObj : UniProvider[],
		providerObjMap : Object[],
	}

	export default {
		data() {
			return {
				title: 'provider',
				flag: false,
				serviceList: [
					{ service: "payment", name: "支付", provider: [], providerObj: [], providerObjMap: [] },
					{ service: "location", name: "定位", provider: [], providerObj: [], providerObjMap: [] }
				] as ProviderItem[],
				providerIds: [] as string[],
				providerObjects: [] as UniProvider[],
			}
		},
		methods: {
			getProvider() {
				this.serviceList.forEach((item : ProviderItem) => {
					var provider = uni.getProviderSync({
						service: item.service,
						// success: (e) => {
						// 	// e.providerIds.forEach((value) => {
						// 	// 	this.providerIds.push(value)
						// 	// })
						// 	// this.updateProvider(item.service, e.providerIds, e.providerObjects);
						// },
						// fail: (e) => {
						// 	console.log("获取provider失败：", e);
						// }
					} as GetProviderSyncOptions)
					provider.providerIds.forEach((value) => {
						this.providerIds.push(value)
					})
					this.updateProvider(item.service, provider.providerIds, provider.providerObjects);
				})
			},
			updateProvider(service : string, provider ?: string[] | null, uniProvider : UniProvider[]) {
				const item : ProviderItem | null = this.serviceList.find((item : ProviderItem) : boolean => {
					return item.service == service
				});
				if (item != null && provider != null) {
					item.provider = provider

					item.providerObj = uniProvider
					item.providerObj.forEach((obj) => {
						this.providerObjects.push(obj)
						// #ifdef APP-ANDROID
						if (obj instanceof UniPaymentWxpayProvider) {//判断微信是否安装
							var isWeChatInstalled = (obj as UniPaymentWxpayProvider).isWeChatInstalled
							console.log(isWeChatInstalled)
						}
						// #endif

						// #ifdef APP-IOS
						const providerObjMap = this.getProviderObjectMap(obj)
						console.log(providerObjMap)
						item.providerObjMap.push(providerObjMap)
						// #endif

					})
				}
			},

			// #ifdef APP-IOS
			getProviderObjectMap(provider : UniProvider) {

				const map = new Map()
				if (this.hasProperty(provider, 'id') && provider.id != null) {
					map.set('id', provider.id)
				}

				if (this.hasProperty(provider, 'description') && provider.description != null) {
					map.set('description', provider.description)
				}

				if (this.hasProperty(provider, 'isAppExist') && provider.isAppExist != null) {
					map.set('isAppExist', provider.isAppExist)
				}

				if (this.hasProperty(provider, 'isWeChatInstalled') && provider.isWeChatInstalled != null) {
					map.set('isWeChatInstalled', provider.isWeChatInstalled)
				}

				if (this.hasMethod(provider, 'uniqueMethodForProvider')) {
					map.set('func-uniqueMethodForProvider', provider.uniqueMethodForProvider())
				}
				return Object.fromEntries(map)
			},
			hasMethod(provider : UniProvider, methodName : string) {
				return typeof provider[methodName] === 'function';
			},
			hasProperty(provider : UniProvider, propName : string) {
				return propName in provider
			}
			// #endif
		}
	}
</script>

<style>
	.page {
		padding: 15px;
	}

	.service-item {
		margin-top: 10px;
	}

	.service-name {
		font-weight: bold;
	}

	.provider-list {
		margin-left: 32px;
	}

	.provider-item {
		line-height: 1.5;
	}

	.btn-get-provider {
		margin-top: 30px;
	}
</style>