<template>
	<view>
		<page-head :title="title"></page-head>
		<view class="uni-padding-wrap">
			<template v-if="!recording && !playing && !hasRecord">
				<view class="page-body-time">
					<text class="time-big">{{formatedRecordTime}}</text>
				</view>
				<view class="page-body-buttons">
					<view class="page-body-button"></view>
					<view class="page-body-button" @click="startRecord">
						<image class="image" src="../../../static/record.png"></image>
					</view>
					<view class="page-body-button"></view>
				</view>
			</template>
			<template v-if="recording === true">
				<view class="page-body-time">
					<text class="time-big">{{formatedRecordTime}}</text>
				</view>
				<view class="page-body-buttons">
					<view class="page-body-button"></view>
					<view class="page-body-button" @click="stopRecord">
						<view class="button-stop-record"></view>
					</view>
					<view class="page-body-button"></view>
				</view>
			</template>
			<template v-if="hasRecord === true && playing === false">
				<view class="page-body-time">
					<text class="time-big">{{formatedPlayTime}}</text>
					<text class="time-small">{{formatedRecordTime}}</text>
				</view>
				<view class="page-body-buttons">
					<view class="page-body-button" @click="playVoice">
						<image class="image" src="../../../static/play.png"></image>
					</view>
					<view class="page-body-button" @click="clear">
						<image class="image" src="../../../static/trash.png"></image>
					</view>
				</view>
			</template>
			<template v-if="hasRecord === true && playing === true">
				<view class="page-body-time">
					<text class="time-big">{{formatedPlayTime}}</text>
					<text class="time-small">{{formatedRecordTime}}</text>
				</view>
				<view class="page-body-buttons">
					<view class="page-body-button" @click="stopVoice">
						<image class="image" src="../../../static/stop.png"></image>
					</view>
					<view class="page-body-button" @click="clear">
						<image class="image" src="../../../static/trash.png"></image>
					</view>
				</view>
			</template>
		</view>
	</view>
</template>
<script>
	// #ifdef APP-PLUS
	import permision from "@/common/permission.js"

	// #endif
	export default {
		data() {
			return {
				title: 'start/stopRecord、play/stopVoice',
				recording: false, //录音中
				playing: false, //播放中
				hasRecord: false, //是否有了一个
				playTimeInterval: 0,
				recordTimeInterval: 0,
				tempFilePath: '',
				recordTime: 0,
				playTime: 0,
				formatedRecordTime: '00:00:00', //录音的总时间
				formatedPlayTime: '00:00:00',//播放录音的当前时间,
				recorderManager: null as RecorderManager | null,
				music: null as InnerAudioContext | null
			}
		},
		onUnload: function () {
			this.end();
		},
		onLoad: function () {
			this.music = uni.createInnerAudioContext();
			this.music!.onEnded(() => {
				clearInterval(this.playTimeInterval)
				var playTime = 0
				console.log('play voice finished')
				this.playing = false;
				this.formatedPlayTime = this.formatTime(playTime);
				this.playTime = playTime;
			});
			this.recorderManager = uni.getRecorderManager();


			this.recorderManager!.onStart(() => {
				console.log('recorder start');

				this.recording = true;
				this.recordTimeInterval = setInterval(() => {
					this.recordTime += 1;
					this.formatedRecordTime = this.formatTime(this.recordTime);
				}, 1000)
			});
			this.recorderManager!.onStop((res) => {
				console.log('on stop',res.tempFilePath);
				this.music!.src = res.tempFilePath

				this.hasRecord = true;
				this.recording = false;
			});
			this.recorderManager!.onError((res) => {
				console.log('recorder onError', JSON.stringify(res));
			});
		},

		methods: {
			pause() {

				console.log('recorder pause start');
				this.recorderManager?.pause()
				this.recorderManager?.onPause(() => {
					console.log('recorder onPause');
				})

			},
			formatTime(time : number) : string {
				if (typeof time !== 'number' || time < 0) {
					return time.toString()
				}

				var hour = parseInt((time / 3600).toString())
				time = time % 3600
				var minute = parseInt((time / 60).toString())
				time = time % 60
				var second = time
				return [hour, minute, second].map((n : number) => {
					let str = n.toString();
					return str.length > 1 ? str : "0" + str;
				}).join(":");

			},
			startRecord() { //开始录音
				console.log('startRecord')
				// TODO ios 在没有请求过权限之前无法得知是否有相关权限，这种状态下需要直接调用录音，但没有状态或回调判断用户拒绝
				this.recorderManager?.start({
					format: 'mp3'
				});
			},
			stopRecord() { //停止录音
				this.recorderManager?.stop();
				clearInterval(this.recordTimeInterval);
			},
			playVoice() {
				console.log('play voice');
				this.playing = true;
				this.playTimeInterval = setInterval(() => {
					this.playTime += 1;
					this.formatedPlayTime = this.formatTime(this.playTime);
				}, 1000)
				this.music?.play();
			},
			stopVoice() {
				clearInterval(this.playTimeInterval)
				this.playing = false;
				this.formatedPlayTime = this.formatTime(0);
				this.playTime = 0;
				this.music?.stop();
			},
			end() {
				this.music?.stop();
				this.recorderManager?.stop();
				clearInterval(this.recordTimeInterval)
				clearInterval(this.playTimeInterval);
				this.recording = false
				this.playing = false
				this.hasRecord = false;
				this.playTime = 0
				this.recordTime = 0;
				this.formatedRecordTime = "00:00:00"
				this.formatedRecordTime = "00:00:00";
			},
			clear() {
				this.end();
			}
		}
	}
</script>

<style>
	.image {
		width: 150rpx;
		height: 150rpx;
	}

	.page-body-wrapper {
		justify-content: space-between;
		flex-grow: 1;
		margin-bottom: 300rpx;
	}

	.page-body-time {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.time-big {
		font-size: 60rpx;
		margin: 20rpx;
	}

	.time-small {
		font-size: 30rpx;
	}

	.page-body-buttons {
		margin-top: 60rpx;
		display: flex;
		justify-content: space-around;
	}

	.page-body-button {
		width: 250rpx;
		align-self: center;
		align-items: center;
	}

	.button-stop-record {
		width: 110rpx;
		height: 110rpx;
		border: 20rpx solid #fff;
		background-color: #f55c23;
		border-radius: 130rpx;
		margin: 0 auto;
	}
</style>
