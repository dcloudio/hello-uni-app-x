<template>
	<uni-icons :id="elId" class='load-ani' :style="aniStyle" @transitionend="onEnd" :type="iconType" :size="size" :color="color"></uni-icons>
	<!-- return h(UniIcons, {
		id: this.elId,
		class: 'load-ani',
		style: this.aniStyle,
		onTransitionend: this.onEnd,
		id: this.elId,
		type: this.iconType,
		color: this.color,
		// TODO +2 是为了大小与自绘元素保持大小一致
		size: this.loadWidth + 2,
	}) -->
</template>

<script>
	export default {
		props: {
			iconType: {
				type: String,
				default: 'loop'
			},
			size: {
				type: Number,
				default: 0
			},
			color: {
				type: String,
				default: '#333'
			}
		},
		data() {
			const elId = `Uni_${(Math.random() * 10e5).toInt().toString(36)}`
			return {
				elId: elId,
				element: null as Element | null,
				times: 0,
				aniStyle: '',
				deg: 3600000
			}
		},
		created() {
			this.times = 0

			// 需要延迟一些时间，否则动画不生效
			setTimeout(() => {
				this.aniStyle = 'transform:rotate(1deg);'
			}, 300)
		},
		mounted() {
			this.element = uni.getElementById(this.elId as string)
		},
		methods: {
			onEnd() {
				// 因为循环角度是不断增加，在增加10次以后需要重置，防止无限增加下去
				if (this.times == 10) {
					this.element!.style.setProperty('transform', 'rotate(0deg)')
					this.element!.style.setProperty('transition-duration', '1')
					this.times = 0
					return
				}

				this.times = this.times + 1

				const rotate = this.times * 360
				this.element!.style.setProperty('transform', 'rotate(' + rotate + 'deg)')
				this.element!.style.setProperty('transition-duration', '1000')
			}
		}
	}
</script>

<style>
	.load-ani {
		transition-property: transform;
		transition-duration: 0.1s;
		transition-timing-function: linear;
		transform: rotate(0deg);
	}
</style>